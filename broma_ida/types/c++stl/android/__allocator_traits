#pragma once

#include "type_traits"
#include "cstddef"
#include "__pointer_traits"

namespace std
{
	#define _GNUSTL_ALLOCATOR_TRAITS_HAS_PROPERTY(NAME, PROPERTY) \
		template <class _Tp, class = void> struct NAME : false_type { }; \
		template <class _Tp>               struct NAME<_Tp, __void_t<typename _Tp:: PROPERTY > > : true_type { }

	// __pointer
	_GNUSTL_ALLOCATOR_TRAITS_HAS_PROPERTY(__has_pointer, pointer);
	template <class _Tp, class _Alloc,
			class _RawAlloc = remove_reference_t<_Alloc>,
			bool = __has_pointer<_RawAlloc>::value>
	struct __pointer {
		using type = typename _RawAlloc::pointer;
	};
	template <class _Tp, class _Alloc, class _RawAlloc>
	struct __pointer<_Tp, _Alloc, _RawAlloc, false> {
		using type = _Tp*;
	};

	// __const_pointer
	_GNUSTL_ALLOCATOR_TRAITS_HAS_PROPERTY(__has_const_pointer, const_pointer);
	template <class _Tp, class _Ptr, class _Alloc,
			bool = __has_const_pointer<_Alloc>::value>
	struct __const_pointer {
		using type = typename _Alloc::const_pointer;
	};
	template <class _Tp, class _Ptr, class _Alloc>
	struct __const_pointer<_Tp, _Ptr, _Alloc, false> {
		using type = typename pointer_traits<_Ptr>::template rebind<const _Tp>::other;
	};

	// __allocator_traits_rebind
	template <class _Tp, class _Up, class = void>
	struct __has_rebind_other : false_type { };
	template <class _Tp, class _Up>
	struct __has_rebind_other<_Tp, _Up, __void_t<typename _Tp::template rebind<_Up>::other> > : true_type { };

	template <class _Tp, class _Up, bool = __has_rebind_other<_Tp, _Up>::value>
	struct __allocator_traits_rebind {
		static_assert(__has_rebind_other<_Tp, _Up>::value, "This allocator has to implement rebind");
		using type = typename _Tp::template rebind<_Up>::other;
	};
	template <template <class, class...> class _Alloc, class _Tp, class ..._Args, class _Up>
	struct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, true> {
		using type = typename _Alloc<_Tp, _Args...>::template rebind<_Up>::other;
	};
	template <template <class, class...> class _Alloc, class _Tp, class ..._Args, class _Up>
	struct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, false> {
		using type = _Alloc<_Up, _Args...>;
	};

	template<class _Alloc, class _Tp>
	using __allocator_traits_rebind_t = typename __allocator_traits_rebind<_Alloc, _Tp>::type;


	template <class _Alloc>
	struct allocator_traits
	{
		using allocator_type       = _Alloc;
		using value_type           = allocator_type::value_type;
		using pointer              = allocator_type::pointer;
		using const_pointer        = allocator_type::const_pointer;
		using void_pointer         = void*;
		using const_void_pointer   = const void*;
		using difference_type      = ptrdiff_t;
		using size_type            = allocator_type::size_type;
		using reference            = allocator_type::reference;
		using const_reference      = allocator_type::const_reference;

		template <class _Tp>
		using rebind_alloc = __allocator_traits_rebind_t<allocator_type, _Tp>;
		template <class _Tp>
		using rebind_traits = allocator_traits<rebind_alloc<_Tp> >;
	};

	template <class _Traits, class _Tp>
	using __rebind_alloc = typename _Traits::template rebind_alloc<_Tp>;
}
