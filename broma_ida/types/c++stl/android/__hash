#pragma once

#include "type_traits"
#include "cstddef"
#include "utility"
#include "__allocator_traits"
#include "__aligned_buffer"
#include "__iterator_tags"
#include "__unary_functions"

#define _Cxx_hashtable_define_trivial_hash(_Tp) 	\
	template<>						\
	struct hash<_Tp> : public __hash_base<size_t, _Tp>  \
	{                                                   \
		size_t                                            \
		operator()(_Tp __val) const noexcept              \
		{ return static_cast<size_t>(__val); }            \
	};

namespace std
{
	template<typename _Tp>
	struct hash;

	template<typename _Hash>
	struct __is_fast_hash : public std::true_type {};

	template<>
	struct __is_fast_hash<hash<long double>> : public std::false_type {};

	template <typename _Key, typename _Hash>
	struct __is_noexcept_hash : std::integral_constant<bool, noexcept(std::declval<const _Hash&>()(std::declval<const _Key&>()))>
	{};

	template<typename _Result, typename _Arg>
	struct __hash_base
	{
		typedef _Result     result_type;
		typedef _Arg      argument_type;
	};

	template<typename _Tp>
	struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
	{
		size_t
		operator()(_Tp* __p) const noexcept
		{ return reinterpret_cast<size_t>(__p); }
	};

	_Cxx_hashtable_define_trivial_hash(bool)
	_Cxx_hashtable_define_trivial_hash(char)
	_Cxx_hashtable_define_trivial_hash(signed char)
	_Cxx_hashtable_define_trivial_hash(unsigned char)
	_Cxx_hashtable_define_trivial_hash(wchar_t)
	_Cxx_hashtable_define_trivial_hash(char16_t)
	_Cxx_hashtable_define_trivial_hash(char32_t)
	_Cxx_hashtable_define_trivial_hash(short)
	_Cxx_hashtable_define_trivial_hash(int)
	_Cxx_hashtable_define_trivial_hash(long)
	_Cxx_hashtable_define_trivial_hash(long long)
	_Cxx_hashtable_define_trivial_hash(unsigned short)
	_Cxx_hashtable_define_trivial_hash(unsigned int)
	_Cxx_hashtable_define_trivial_hash(unsigned long)
	_Cxx_hashtable_define_trivial_hash(unsigned long long)


	
	template<typename _Tp, typename _Hash>
	using __cache_default
	  =  std::__not_<std::conjunction<// Do not cache for fast hasher.
			   __is_fast_hash<_Hash>,
			   // Mandatory to have erase not throwing.
			   __is_noexcept_hash<_Tp, _Hash>>>;



	template<typename _Key, typename _Value, typename _Alloc,
		typename _ExtractKey, typename _Equal,
		typename _H1, typename _H2, typename _Hash,
		typename _RehashPolicy, typename _Traits>
	class _Hashtable;

	template<bool _Cache_hash_code, bool _Constant_iterators, bool _Unique_keys>
	struct _Hashtable_traits
	{
		template<bool _Cond>
		using __bool_constant = std::integral_constant<bool, _Cond>;

		using __hash_cached = __bool_constant<_Cache_hash_code>;
		using __constant_iterators = __bool_constant<_Constant_iterators>;
		using __unique_keys = __bool_constant<_Unique_keys>;
	};


	namespace __detail
	{
		template<typename _Key, typename _Value,
			typename _ExtractKey, typename _Equal,
			typename _H1, typename _H2, typename _Hash, typename _Traits>
		struct _Hashtable_base;

		template <typename _Key, typename _Hash>
		struct __is_noexcept_hash : std::bool_constant<
			noexcept(declval<const _Hash&>()(declval<const _Key&>()))>
		{ };

		struct _Identity
		{
			template<typename _Tp>
			_Tp&&
			operator()(_Tp&& __x) const
			{ return std::forward<_Tp>(__x); }
		};

		struct _Select1st
		{
			template<typename _Tp>
			auto
			operator()(_Tp&& __x) const
			-> decltype(std::get<0>(std::forward<_Tp>(__x)))
			{ return std::get<0>(std::forward<_Tp>(__x)); }
		};

		template<typename _NodeAlloc>
		struct _Hashtable_alloc;

		template<typename _NodeAlloc>
		struct _ReuseOrAllocNode
		{
		private:
			using __node_alloc_type = _NodeAlloc;
			using __hashtable_alloc = _Hashtable_alloc<__node_alloc_type>;
			using __value_alloc_type = typename __hashtable_alloc::__value_alloc_type;
			using __value_alloc_traits =
			typename __hashtable_alloc::__value_alloc_traits;
			using __node_alloc_traits =
			typename __hashtable_alloc::__node_alloc_traits;
			using __node_type = typename __hashtable_alloc::__node_type;

		private:
			mutable __node_type* _M_nodes;
			__hashtable_alloc& _M_h;
		};

		template<typename _NodeAlloc>
		struct _AllocNode
		{
		private:
			using __hashtable_alloc = _Hashtable_alloc<_NodeAlloc>;
			using __node_type = typename __hashtable_alloc::__node_type;

		private:
			__hashtable_alloc& _M_h;
		};


		template<bool _Cache_hash_code, bool _Constant_iterators, bool _Unique_keys>
		struct _Hashtable_traits
		{
			using __hash_cached = bool_constant<_Cache_hash_code>;
			using __constant_iterators = bool_constant<_Constant_iterators>;
			using __unique_keys = bool_constant<_Unique_keys>;
		};

		struct _Hash_node_base
		{
			_Hash_node_base* _M_nxt;
		};

		template<typename _Value>
		struct _Hash_node_value_base : _Hash_node_base
		{
			typedef _Value value_type;

			std::__aligned_buffer<_Value> _M_storage;
		};

		template<typename _Value, bool _Cache_hash_code>
		struct _Hash_node;

		template<typename _Value>
		struct _Hash_node<_Value, true> : _Hash_node_value_base<_Value>
		{
			std::size_t  _M_hash_code;
		};

		template<typename _Value>
		struct _Hash_node<_Value, false> : _Hash_node_value_base<_Value>
		{
			_Hash_node*
			_M_next() const noexcept
			{ return static_cast<_Hash_node*>(this->_M_nxt); }
		};

		/// Base class for node iterators.
		template<typename _Value, bool _Cache_hash_code>
		struct _Node_iterator_base
		{
			using __node_type = _Hash_node<_Value, _Cache_hash_code>;

			__node_type*  _M_cur;

			_Node_iterator_base(__node_type* __p) noexcept
			: _M_cur(__p) { }

			void
			_M_incr() noexcept
			{ _M_cur = _M_cur->_M_next(); }
		};

		/// Node iterators, used to iterate through all the hashtable.
		template<typename _Value, bool __constant_iterators, bool __cache>
		struct _Node_iterator
			: public _Node_iterator_base<_Value, __cache>
		{
		private:
			using __base_type = _Node_iterator_base<_Value, __cache>;
			using __node_type = typename __base_type::__node_type;

		public:
			typedef _Value					value_type;
			typedef std::ptrdiff_t				difference_type;
			typedef std::forward_iterator_tag			iterator_category;

			using pointer = typename std::conditional<__constant_iterators,
								const _Value*, _Value*>::type;

			using reference = typename std::conditional<__constant_iterators,
								const _Value&, _Value&>::type;
		};

		/// Node const_iterators, used to iterate through all the hashtable.
		template<typename _Value, bool __constant_iterators, bool __cache>
		struct _Node_const_iterator
			: public _Node_iterator_base<_Value, __cache>
		{
		private:
			using __base_type = _Node_iterator_base<_Value, __cache>;
			using __node_type = typename __base_type::__node_type;

		public:
			typedef _Value					value_type;
			typedef std::ptrdiff_t				difference_type;
			typedef std::forward_iterator_tag			iterator_category;

			typedef const _Value*				pointer;
			typedef const _Value&				reference;
		};

		// Many of class template _Hashtable's template parameters are policy
		// classes.  These are defaults for the policies.

		/// Default range hashing function: use division to fold a large number
		/// into the range [0, N).
		struct _Mod_range_hashing
		{
			typedef std::size_t first_argument_type;
			typedef std::size_t second_argument_type;
			typedef std::size_t result_type;

			result_type
			operator()(first_argument_type __num,
				second_argument_type __den) const noexcept
			{ return __num % __den; }
		};

		/// Default ranged hash function H.  In principle it should be a
		/// function object composed from objects of type H1 and H2 such that
		/// h(k, N) = h2(h1(k), N), but that would mean making extra copies of
		/// h1 and h2.  So instead we'll just use a tag to tell class template
		/// hashtable to do that composition.
		struct _Default_ranged_hash { };

		/// Default value for rehash policy.  Bucket size is (usually) the
		/// smallest prime that keeps the load factor small enough.
		struct _Prime_rehash_policy
		{
			typedef std::size_t _State;

			static const std::size_t _S_growth_factor = 2;

			float		_M_max_load_factor;
			mutable std::size_t	_M_next_resize;
		};

		// Base classes for std::_Hashtable.  We define these base classes
		// because in some cases we want to do different things depending on
		// the value of a policy class.  In some cases the policy class
		// affects which member functions and nested typedefs are defined;
		// we handle that by specializing base class templates.  Several of
		// the base class templates need to access other members of class
		// template _Hashtable, so we use a variant of the "Curiously
		// Recurring Template Pattern" (CRTP) technique.

		/**
		*  Primary class template _Map_base.
		*
		*  If the hashtable has a value type of the form pair<T1, T2> and a
		*  key extraction policy (_ExtractKey) that returns the first part
		*  of the pair, the hashtable gets a mapped_type typedef.  If it
		*  satisfies those criteria and also has unique keys, then it also
		*  gets an operator[].
		*/
		template<typename _Key, typename _Value, typename _Alloc,
			typename _ExtractKey, typename _Equal,
			typename _H1, typename _H2, typename _Hash,
			typename _RehashPolicy, typename _Traits,
			bool _Unique_keys = _Traits::__unique_keys::value>
		struct _Map_base { };

		/// Partial specialization, __unique_keys set to false.
		template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,
			typename _H1, typename _H2, typename _Hash,
			typename _RehashPolicy, typename _Traits>
		struct _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
					_H1, _H2, _Hash, _RehashPolicy, _Traits, false>
		{
			using mapped_type = typename std::tuple_element<1, _Pair>::type;
		};

		/// Partial specialization, __unique_keys set to true.
		template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,
			typename _H1, typename _H2, typename _Hash,
			typename _RehashPolicy, typename _Traits>
		struct _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
				_H1, _H2, _Hash, _RehashPolicy, _Traits, true>
		{
		private:
			using __hashtable_base = __detail::_Hashtable_base<_Key, _Pair,
									_Select1st,
									_Equal, _H1, _H2, _Hash,
									_Traits>;

			using __hashtable = _Hashtable<_Key, _Pair, _Alloc,
							_Select1st, _Equal,
							_H1, _H2, _Hash, _RehashPolicy, _Traits>;

			using __hash_code = typename __hashtable_base::__hash_code;
			using __node_type = typename __hashtable_base::__node_type;

		public:
			using key_type = typename __hashtable_base::key_type;
			using iterator = typename __hashtable_base::iterator;
			using mapped_type = typename std::tuple_element<1, _Pair>::type;
		};

		/**
		*  Primary class template _Insert_base.
		*
		*  insert member functions appropriate to all _Hashtables.
		*/
		template<typename _Key, typename _Value, typename _Alloc,
			typename _ExtractKey, typename _Equal,
			typename _H1, typename _H2, typename _Hash,
			typename _RehashPolicy, typename _Traits>
		struct _Insert_base
		{
		protected:
			using __hashtable = _Hashtable<_Key, _Value, _Alloc, _ExtractKey,
							_Equal, _H1, _H2, _Hash,
							_RehashPolicy, _Traits>;

			using __hashtable_base = _Hashtable_base<_Key, _Value, _ExtractKey,
								_Equal, _H1, _H2, _Hash,
								_Traits>;

			using value_type = typename __hashtable_base::value_type;
			using iterator = typename __hashtable_base::iterator;
			using const_iterator =  typename __hashtable_base::const_iterator;
			using size_type = typename __hashtable_base::size_type;

			using __unique_keys = typename __hashtable_base::__unique_keys;
			using __ireturn_type = typename __hashtable_base::__ireturn_type;
			using __node_type = _Hash_node<_Value, _Traits::__hash_cached::value>;
			using __node_alloc_type = std::allocator_traits<_Alloc>::template rebind_alloc<__node_type>;
			using __node_gen_type = _AllocNode<__node_alloc_type>;
		};

		/**
		*  Primary class template _Insert.
		*
		*  Select insert member functions appropriate to _Hashtable policy choices.
		*/
		template<typename _Key, typename _Value, typename _Alloc,
			typename _ExtractKey, typename _Equal,
			typename _H1, typename _H2, typename _Hash,
			typename _RehashPolicy, typename _Traits,
			bool _Constant_iterators = _Traits::__constant_iterators::value,
			bool _Unique_keys = _Traits::__unique_keys::value>
		struct _Insert;

		/// Specialization.
		template<typename _Key, typename _Value, typename _Alloc,
			typename _ExtractKey, typename _Equal,
			typename _H1, typename _H2, typename _Hash,
			typename _RehashPolicy, typename _Traits>
		struct _Insert<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash,
				_RehashPolicy, _Traits, true, true>
			: public _Insert_base<_Key, _Value, _Alloc, _ExtractKey, _Equal,
					_H1, _H2, _Hash, _RehashPolicy, _Traits>
		{
			using __base_type = _Insert_base<_Key, _Value, _Alloc, _ExtractKey,
							_Equal, _H1, _H2, _Hash,
							_RehashPolicy, _Traits>;
			using value_type = typename __base_type::value_type;
			using iterator = typename __base_type::iterator;
			using const_iterator =  typename __base_type::const_iterator;

			using __unique_keys = typename __base_type::__unique_keys;
			using __hashtable = typename __base_type::__hashtable;
			using __node_gen_type = typename __base_type::__node_gen_type;

			// using __base_type::insert;
		};

		/// Specialization.
		template<typename _Key, typename _Value, typename _Alloc,
			typename _ExtractKey, typename _Equal,
			typename _H1, typename _H2, typename _Hash,
			typename _RehashPolicy, typename _Traits>
		struct _Insert<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash,
				_RehashPolicy, _Traits, true, false>
			: public _Insert_base<_Key, _Value, _Alloc, _ExtractKey, _Equal,
					_H1, _H2, _Hash, _RehashPolicy, _Traits>
		{
			using __base_type = _Insert_base<_Key, _Value, _Alloc, _ExtractKey,
							_Equal, _H1, _H2, _Hash,
							_RehashPolicy, _Traits>;
			using value_type = typename __base_type::value_type;
			using iterator = typename __base_type::iterator;
			using const_iterator =  typename __base_type::const_iterator;

			using __unique_keys = typename __base_type::__unique_keys;
			using __hashtable = typename __base_type::__hashtable;
			using __node_gen_type = typename __base_type::__node_gen_type;

			// using __base_type::insert;
		};

		/// Specialization.
		template<typename _Key, typename _Value, typename _Alloc,
			typename _ExtractKey, typename _Equal,
			typename _H1, typename _H2, typename _Hash,
			typename _RehashPolicy, typename _Traits, bool _Unique_keys>
		struct _Insert<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash,
				_RehashPolicy, _Traits, false, _Unique_keys>
			: public _Insert_base<_Key, _Value, _Alloc, _ExtractKey, _Equal,
					_H1, _H2, _Hash, _RehashPolicy, _Traits>
		{
			using __base_type = _Insert_base<_Key, _Value, _Alloc, _ExtractKey,
							_Equal, _H1, _H2, _Hash,
							_RehashPolicy, _Traits>;
			using value_type = typename __base_type::value_type;
			using iterator = typename __base_type::iterator;
			using const_iterator =  typename __base_type::const_iterator;

			using __unique_keys = typename __base_type::__unique_keys;
			using __hashtable = typename __base_type::__hashtable;
			using __ireturn_type = typename __base_type::__ireturn_type;

			// using __base_type::insert;

			// template<typename _Pair>
			// using __is_cons = std::is_constructible<value_type, _Pair&&>;

			// template<typename _Pair>
			// using _IFcons = std::enable_if<__is_cons<_Pair>::value>;

			// template<typename _Pair>
			// using _IFconsp = typename _IFcons<_Pair>::type;
		};

		/**
		*  Primary class template  _Rehash_base.
		*
		*  Give hashtable the max_load_factor functions and reserve iff the
		*  rehash policy is _Prime_rehash_policy.
		*/
		template<typename _Key, typename _Value, typename _Alloc,
			typename _ExtractKey, typename _Equal,
			typename _H1, typename _H2, typename _Hash,
			typename _RehashPolicy, typename _Traits>
		struct _Rehash_base;

		/// Specialization.
		template<typename _Key, typename _Value, typename _Alloc,
			typename _ExtractKey, typename _Equal,
			typename _H1, typename _H2, typename _Hash, typename _Traits>
		struct _Rehash_base<_Key, _Value, _Alloc, _ExtractKey, _Equal,
					_H1, _H2, _Hash, _Prime_rehash_policy, _Traits>
		{
			using __hashtable = _Hashtable<_Key, _Value, _Alloc, _ExtractKey,
							_Equal, _H1, _H2, _Hash,
							_Prime_rehash_policy, _Traits>;
		};

		/**
		*  Primary class template _Hashtable_ebo_helper.
		*
		*  Helper class using EBO when it is not forbidden (the type is not
		*  final) and when it is worth it (the type is empty.)
		*/
		template<int _Nm, typename _Tp,
			bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
		struct _Hashtable_ebo_helper;

		/// Specialization using EBO.
		template<int _Nm, typename _Tp>
		struct _Hashtable_ebo_helper<_Nm, _Tp, true>
			: private _Tp
		{
			_Hashtable_ebo_helper() = default;

			template<typename _OtherTp>
			_Hashtable_ebo_helper(_OtherTp&& __tp)
			: _Tp(std::forward<_OtherTp>(__tp))
			{ }

			static const _Tp&
			_S_cget(const _Hashtable_ebo_helper& __eboh)
			{ return static_cast<const _Tp&>(__eboh); }

			static _Tp&
			_S_get(_Hashtable_ebo_helper& __eboh)
			{ return static_cast<_Tp&>(__eboh); }
		};

		/// Specialization not using EBO.
		template<int _Nm, typename _Tp>
		struct _Hashtable_ebo_helper<_Nm, _Tp, false>
		{
			_Hashtable_ebo_helper() = default;

			template<typename _OtherTp>
			_Hashtable_ebo_helper(_OtherTp&& __tp)
			: _M_tp(std::forward<_OtherTp>(__tp))
			{ }

			static const _Tp&
			_S_cget(const _Hashtable_ebo_helper& __eboh)
			{ return __eboh._M_tp; }

			static _Tp&
			_S_get(_Hashtable_ebo_helper& __eboh)
			{ return __eboh._M_tp; }

		private:
			_Tp _M_tp;
		};

		/**
		*  Primary class template _Local_iterator_base.
		*
		*  Base class for local iterators, used to iterate within a bucket
		*  but not between buckets.
		*/
		template<typename _Key, typename _Value, typename _ExtractKey,
			typename _H1, typename _H2, typename _Hash,
			bool __cache_hash_code>
		struct _Local_iterator_base;

		/**
		*  Primary class template _Hash_code_base.
		*
		*  Encapsulates two policy issues that aren't quite orthogonal.
		*   (1) the difference between using a ranged hash function and using
		*       the combination of a hash function and a range-hashing function.
		*       In the former case we don't have such things as hash codes, so
		*       we have a dummy type as placeholder.
		*   (2) Whether or not we cache hash codes.  Caching hash codes is
		*       meaningless if we have a ranged hash function.
		*
		*  We also put the key extraction objects here, for convenience.
		*  Each specialization derives from one or more of the template
		*  parameters to benefit from Ebo. This is important as this type
		*  is inherited in some cases by the _Local_iterator_base type used
		*  to implement local_iterator and const_local_iterator. As with
		*  any iterator type we prefer to make it as small as possible.
		*
		*  Primary template is unused except as a hook for specializations.
		*/
		template<typename _Key, typename _Value, typename _ExtractKey,
			typename _H1, typename _H2, typename _Hash,
			bool __cache_hash_code>
		struct _Hash_code_base;

		/// Specialization: ranged hash function, no caching hash codes.  H1
		/// and H2 are provided but ignored.  We define a dummy hash code type.
		template<typename _Key, typename _Value, typename _ExtractKey,
			typename _H1, typename _H2, typename _Hash>
		struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, false>
			: private _Hashtable_ebo_helper<0, _ExtractKey>,
				private _Hashtable_ebo_helper<1, _Hash>
		{
		private:
			using __ebo_extract_key = _Hashtable_ebo_helper<0, _ExtractKey>;
			using __ebo_hash = _Hashtable_ebo_helper<1, _Hash>;

		protected:
			typedef void* 					__hash_code;
			typedef _Hash_node<_Value, false>			__node_type;
		};

		// No specialization for ranged hash function while caching hash codes.
		// That combination is meaningless, and trying to do it is an error.

		/// Specialization: ranged hash function, cache hash codes.  This
		/// combination is meaningless, so we provide only a declaration
		/// and no definition.
		template<typename _Key, typename _Value, typename _ExtractKey,
			typename _H1, typename _H2, typename _Hash>
		struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, true>;

		/// Specialization: hash function and range-hashing function, no
		/// caching of hash codes.
		/// Provides typedef and accessor required by C++ 11.
		template<typename _Key, typename _Value, typename _ExtractKey,
			typename _H1, typename _H2>
		struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2,
					_Default_ranged_hash, false>
			: private _Hashtable_ebo_helper<0, _ExtractKey>,
				private _Hashtable_ebo_helper<1, _H1>,
				private _Hashtable_ebo_helper<2, _H2>
		{
		private:
			using __ebo_extract_key = _Hashtable_ebo_helper<0, _ExtractKey>;
			using __ebo_h1 = _Hashtable_ebo_helper<1, _H1>;
			using __ebo_h2 = _Hashtable_ebo_helper<2, _H2>;

			// Gives the local iterator implementation access to _M_bucket_index().
			friend struct _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2,
							_Default_ranged_hash, false>;

		public:
			typedef _H1 					hasher;

		protected:
			typedef std::size_t 				__hash_code;
			typedef _Hash_node<_Value, false>			__node_type;
		};

		/// Specialization: hash function and range-hashing function,
		/// caching hash codes.  H is provided but ignored.  Provides
		/// typedef and accessor required by C++ 11.
		template<typename _Key, typename _Value, typename _ExtractKey,
			typename _H1, typename _H2>
		struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2,
					_Default_ranged_hash, true>
			: private _Hashtable_ebo_helper<0, _ExtractKey>,
				private _Hashtable_ebo_helper<1, _H1>,
				private _Hashtable_ebo_helper<2, _H2>
		{
		private:
			// Gives the local iterator implementation access to _M_h2().
			friend struct _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2,
							_Default_ranged_hash, true>;

			using __ebo_extract_key = _Hashtable_ebo_helper<0, _ExtractKey>;
			using __ebo_h1 = _Hashtable_ebo_helper<1, _H1>;
			using __ebo_h2 = _Hashtable_ebo_helper<2, _H2>;

		public:
			typedef _H1 					hasher;

		protected:
			typedef std::size_t 				__hash_code;
			typedef _Hash_node<_Value, true>			__node_type;
		};

		/**
		*  Primary class template _Equal_helper.
		*
		*/
		template <typename _Key, typename _Value, typename _ExtractKey,
				typename _Equal, typename _HashCodeType,
				bool __cache_hash_code>
		struct _Equal_helper;

		/// Specialization.
		template<typename _Key, typename _Value, typename _ExtractKey,
			typename _Equal, typename _HashCodeType>
		struct _Equal_helper<_Key, _Value, _ExtractKey, _Equal, _HashCodeType, true>
		{
			static bool
			_S_equals(const _Equal& __eq, const _ExtractKey& __extract,
				const _Key& __k, _HashCodeType __c, _Hash_node<_Value, true>* __n)
			{ return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
		};

		/// Specialization.
		template<typename _Key, typename _Value, typename _ExtractKey,
			typename _Equal, typename _HashCodeType>
		struct _Equal_helper<_Key, _Value, _ExtractKey, _Equal, _HashCodeType, false>
		{
			static bool
			_S_equals(const _Equal& __eq, const _ExtractKey& __extract,
				const _Key& __k, _HashCodeType, _Hash_node<_Value, false>* __n)
			{ return __eq(__k, __extract(__n->_M_v())); }
		};


		/// Partial specialization used when nodes contain a cached hash code.
		template<typename _Key, typename _Value, typename _ExtractKey,
			typename _H1, typename _H2, typename _Hash>
		struct _Local_iterator_base<_Key, _Value, _ExtractKey,
						_H1, _H2, _Hash, true>
			: private _Hashtable_ebo_helper<0, _H2>
		{
		protected:
			using __base_type = _Hashtable_ebo_helper<0, _H2>;
			using __hash_code_base = _Hash_code_base<_Key, _Value, _ExtractKey,
								_H1, _H2, _Hash, true>;

			_Hash_node<_Value, true>*  _M_cur;
			std::size_t _M_bucket;
			std::size_t _M_bucket_count;
		};

		// Uninitialized storage for a _Hash_code_base.
		// This type is DefaultConstructible and Assignable even if the
		// _Hash_code_base type isn't, so that _Local_iterator_base<..., false>
		// can be DefaultConstructible and Assignable.
		template<typename _Tp, bool _IsEmpty = std::is_empty<_Tp>::value>
		struct _Hash_code_storage
		{
			std::__aligned_buffer<_Tp> _M_storage;
		};

		// Empty partial specialization for empty _Hash_code_base types.
		template<typename _Tp>
		struct _Hash_code_storage<_Tp, true>
		{
			static_assert( std::is_empty<_Tp>::value, "Type must be empty" );
		};

		template<typename _Key, typename _Value, typename _ExtractKey,
			typename _H1, typename _H2, typename _Hash>
		using __hash_code_for_local_iter
			= _Hash_code_storage<_Hash_code_base<_Key, _Value, _ExtractKey,
							_H1, _H2, _Hash, false>>;

		// Partial specialization used when hash codes are not cached
		template<typename _Key, typename _Value, typename _ExtractKey,
			typename _H1, typename _H2, typename _Hash>
		struct _Local_iterator_base<_Key, _Value, _ExtractKey,
						_H1, _H2, _Hash, false>
			: __hash_code_for_local_iter<_Key, _Value, _ExtractKey, _H1, _H2, _Hash>
		{
		protected:
			using __hash_code_base = _Hash_code_base<_Key, _Value, _ExtractKey,
								_H1, _H2, _Hash, false>;

		_Hash_node<_Value, false>*  _M_cur;
		std::size_t _M_bucket;
		std::size_t _M_bucket_count;
		};

		/// local iterators
		template<typename _Key, typename _Value, typename _ExtractKey,
			typename _H1, typename _H2, typename _Hash,
			bool __constant_iterators, bool __cache>
		struct _Local_iterator
			: public _Local_iterator_base<_Key, _Value, _ExtractKey,
					_H1, _H2, _Hash, __cache>
		{
		private:
			using __base_type = _Local_iterator_base<_Key, _Value, _ExtractKey,
								_H1, _H2, _Hash, __cache>;
			using __hash_code_base = typename __base_type::__hash_code_base;

		public:
			typedef _Value					value_type;
			typedef typename std::conditional<__constant_iterators,
							const _Value*, _Value*>::type
									pointer;
			typedef typename std::conditional<__constant_iterators,
							const _Value&, _Value&>::type
									reference;
			typedef std::ptrdiff_t				difference_type;
			typedef std::forward_iterator_tag			iterator_category;
		};

		/// local const_iterators
		template<typename _Key, typename _Value, typename _ExtractKey,
			typename _H1, typename _H2, typename _Hash,
			bool __constant_iterators, bool __cache>
		struct _Local_const_iterator
			: public _Local_iterator_base<_Key, _Value, _ExtractKey,
					_H1, _H2, _Hash, __cache>
		{
		private:
			using __base_type = _Local_iterator_base<_Key, _Value, _ExtractKey,
								_H1, _H2, _Hash, __cache>;
			using __hash_code_base = typename __base_type::__hash_code_base;

		public:
			typedef _Value					value_type;
			typedef const _Value*				pointer;
			typedef const _Value&				reference;
			typedef std::ptrdiff_t				difference_type;
			typedef std::forward_iterator_tag			iterator_category;
		};

		/**
		*  Primary class template _Hashtable_base.
		*
		*  Helper class adding management of _Equal functor to
		*  _Hash_code_base type.
		*
		*  Base class templates are:
		*    - __detail::_Hash_code_base
		*    - __detail::_Hashtable_ebo_helper
		*/
		template<typename _Key, typename _Value,
			typename _ExtractKey, typename _Equal,
			typename _H1, typename _H2, typename _Hash, typename _Traits>
		struct _Hashtable_base
			: public _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash,
					_Traits::__hash_cached::value>,
				private _Hashtable_ebo_helper<0, _Equal>
		{
		public:
			typedef _Key					key_type;
			typedef _Value					value_type;
			typedef _Equal					key_equal;
			typedef std::size_t					size_type;
			typedef std::ptrdiff_t				difference_type;

			using __traits_type = _Traits;
			using __hash_cached = typename __traits_type::__hash_cached;
			using __constant_iterators = typename __traits_type::__constant_iterators;
			using __unique_keys = typename __traits_type::__unique_keys;

			using __hash_code_base = _Hash_code_base<_Key, _Value, _ExtractKey,
								_H1, _H2, _Hash,
								__hash_cached::value>;

			using __hash_code = typename __hash_code_base::__hash_code;
			using __node_type = typename __hash_code_base::__node_type;

			using iterator = __detail::_Node_iterator<value_type,
								__constant_iterators::value,
								__hash_cached::value>;

			using const_iterator = __detail::_Node_const_iterator<value_type,
								__constant_iterators::value,
								__hash_cached::value>;

			using local_iterator = __detail::_Local_iterator<key_type, value_type,
								_ExtractKey, _H1, _H2, _Hash,
								__constant_iterators::value,
									__hash_cached::value>;

			using const_local_iterator = __detail::_Local_const_iterator<key_type,
										value_type,
							_ExtractKey, _H1, _H2, _Hash,
							__constant_iterators::value,
							__hash_cached::value>;

			using __ireturn_type = typename std::conditional<__unique_keys::value,
									std::pair<iterator, bool>,
									iterator>::type;

		private:
			using _EqualEBO = _Hashtable_ebo_helper<0, _Equal>;
			using _EqualHelper =  _Equal_helper<_Key, _Value, _ExtractKey, _Equal,
						__hash_code, __hash_cached::value>;
		};

		/**
		*  struct _Equality_base.
		*
		*  Common types and functions for class _Equality.
		*/
		struct _Equality_base
		{
		protected:
			template<typename _Uiterator>
			static bool
			_S_is_permutation(_Uiterator, _Uiterator, _Uiterator);
		};

		/**
		*  Primary class template  _Equality.
		*
		*  This is for implementing equality comparison for unordered
		*  containers, per N3068, by John Lakos and Pablo Halpern.
		*  Algorithmically, we follow closely the reference implementations
		*  therein.
		*/
		template<typename _Key, typename _Value, typename _Alloc,
			typename _ExtractKey, typename _Equal,
			typename _H1, typename _H2, typename _Hash,
			typename _RehashPolicy, typename _Traits,
			bool _Unique_keys = _Traits::__unique_keys::value>
		struct _Equality;

		/// Specialization.
		template<typename _Key, typename _Value, typename _Alloc,
			typename _ExtractKey, typename _Equal,
			typename _H1, typename _H2, typename _Hash,
			typename _RehashPolicy, typename _Traits>
		struct _Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal,
					_H1, _H2, _Hash, _RehashPolicy, _Traits, true>
		{
			using __hashtable = _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
							_H1, _H2, _Hash, _RehashPolicy, _Traits>;

			bool
			_M_equal(const __hashtable&) const;
		};

		/// Specialization.
		template<typename _Key, typename _Value, typename _Alloc,
			typename _ExtractKey, typename _Equal,
			typename _H1, typename _H2, typename _Hash,
			typename _RehashPolicy, typename _Traits>
		struct _Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal,
					_H1, _H2, _Hash, _RehashPolicy, _Traits, false>
			: public _Equality_base
		{
			using __hashtable = _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
							_H1, _H2, _Hash, _RehashPolicy, _Traits>;

			bool
			_M_equal(const __hashtable&) const;
		};

		/**
		* This type deals with all allocation and keeps an allocator instance through
		* inheritance to benefit from EBO when possible.
		*/
		template<typename _NodeAlloc>
		struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
		{
		private:
			using __ebo_node_alloc = _Hashtable_ebo_helper<0, _NodeAlloc>;

		public:
			using __node_type = typename _NodeAlloc::value_type;
			using __node_alloc_type = _NodeAlloc;
			// Use __gnu_cxx to benefit from _S_always_equal and al.
			using __node_alloc_traits = std::allocator_traits<__node_alloc_type>;

			using __value_type = typename __node_type::value_type;
			using __value_alloc_type = std::allocator_traits<__node_alloc_type>::template rebind_alloc<__value_type>;
			using __value_alloc_traits = std::allocator_traits<__value_alloc_type>;

			using __node_base = __detail::_Hash_node_base;
			using __bucket_type = __node_base*;      
			using __bucket_alloc_type = std::allocator_traits<__node_alloc_type>::template rebind_alloc<__bucket_type>;
			using __bucket_alloc_traits = std::allocator_traits<__bucket_alloc_type>;
		};
	}

	template<typename _Key, typename _Value, typename _Alloc,
		typename _ExtractKey, typename _Equal,
		typename _H1, typename _H2, typename _Hash,
		typename _RehashPolicy, typename _Traits>
	class _Hashtable
		: public __detail::_Hashtable_base<_Key, _Value, _ExtractKey, _Equal,
						_H1, _H2, _Hash, _Traits>,
			public __detail::_Map_base<_Key, _Value, _Alloc, _ExtractKey, _Equal,
						_H1, _H2, _Hash, _RehashPolicy, _Traits>,
			public __detail::_Insert<_Key, _Value, _Alloc, _ExtractKey, _Equal,
						_H1, _H2, _Hash, _RehashPolicy, _Traits>,
			public __detail::_Rehash_base<_Key, _Value, _Alloc, _ExtractKey, _Equal,
						_H1, _H2, _Hash, _RehashPolicy, _Traits>,
			public __detail::_Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal,
						_H1, _H2, _Hash, _RehashPolicy, _Traits>,
			private __detail::_Hashtable_alloc<
						typename std::allocator_traits<_Alloc>::template rebind_alloc<
							__detail::_Hash_node<_Value, _Traits::__hash_cached::value
						> > >
	{
		using __traits_type = _Traits;
		using __hash_cached = typename __traits_type::__hash_cached;
		using __node_type = __detail::_Hash_node<_Value, __hash_cached::value>;
		using __node_alloc_type =
			typename std::allocator_traits<_Alloc>::template rebind_alloc<__node_type>;

		using __hashtable_alloc = __detail::_Hashtable_alloc<__node_alloc_type>;

		using __value_alloc_traits =
			typename __hashtable_alloc::__value_alloc_traits;
		using __node_alloc_traits =
			typename __hashtable_alloc::__node_alloc_traits;
		using __node_base = typename __hashtable_alloc::__node_base;
		using __bucket_type = typename __hashtable_alloc::__bucket_type;

	public:
		typedef _Key						key_type;
		typedef _Value						value_type;
		typedef _Alloc						allocator_type;
		typedef _Equal						key_equal;

		// mapped_type, if present, comes from _Map_base.
		// hasher, if present, comes from _Hash_code_base/_Hashtable_base.
		typedef typename __value_alloc_traits::pointer		pointer;
		typedef typename __value_alloc_traits::const_pointer	const_pointer;
		typedef value_type&					reference;
		typedef const value_type&					const_reference;

	private:
		using __rehash_type = _RehashPolicy;
		using __rehash_state = typename __rehash_type::_State;

		using __constant_iterators = typename __traits_type::__constant_iterators;
		using __unique_keys = typename __traits_type::__unique_keys;

		using __key_extract = typename std::conditional<
							__constant_iterators::value,
								__detail::_Identity,
							__detail::_Select1st>::type;

		using __hashtable_base = __detail::
					_Hashtable_base<_Key, _Value, _ExtractKey,
							_Equal, _H1, _H2, _Hash, _Traits>;

		using __hash_code_base =  typename __hashtable_base::__hash_code_base;
		using __hash_code =  typename __hashtable_base::__hash_code;
		using __ireturn_type = typename __hashtable_base::__ireturn_type;

		using __map_base = __detail::_Map_base<_Key, _Value, _Alloc, _ExtractKey,
							_Equal, _H1, _H2, _Hash,
							_RehashPolicy, _Traits>;

		using __rehash_base = __detail::_Rehash_base<_Key, _Value, _Alloc,
							_ExtractKey, _Equal,
							_H1, _H2, _Hash,
							_RehashPolicy, _Traits>;

		using __eq_base = __detail::_Equality<_Key, _Value, _Alloc, _ExtractKey,
						_Equal, _H1, _H2, _Hash,
						_RehashPolicy, _Traits>;

		using __reuse_or_alloc_node_type =
			__detail::_ReuseOrAllocNode<__node_alloc_type>;

		// Metaprogramming for picking apart hash caching.
		// template<typename _Cond>
		// using __if_hash_cached = __or_<__not_<__hash_cached>, _Cond>;

		// template<typename _Cond>
		// using __if_hash_not_cached = __or_<__hash_cached, _Cond>;

		// Compile-time diagnostics.

		// _Hash_code_base has everything protected, so use this derived type to
		// access it.
		struct __hash_code_base_access : __hash_code_base
		{ using __hash_code_base::_M_bucket_index; };

		// Getting a bucket index from a node shall not throw because it is used
		// in methods (erase, swap...) that shall not throw.
		// static_assert(noexcept(declval<const __hash_code_base_access&>()
		// 			._M_bucket_index((const __node_type*)nullptr,
		// 					(std::size_t)0)),
		// 	"Cache the hash code or qualify your functors involved"
		// 	" in hash code and bucket index computation with noexcept");

		// Following two static assertions are necessary to guarantee
		// that local_iterator will be default constructible.

		// When hash codes are cached local iterator inherits from H2 functor
		// which must then be default constructible.
		// static_assert(__if_hash_cached<is_default_constructible<_H2>>::value,
		// 	"Functor used to map hash code to bucket index"
		// 	" must be default constructible");

		template<typename _Keya, typename _Valuea, typename _Alloca,
			typename _ExtractKeya, typename _Equala,
			typename _H1a, typename _H2a, typename _Hasha,
			typename _RehashPolicya, typename _Traitsa,
			bool _Unique_keysa>
		friend struct __detail::_Map_base;

		template<typename _Keya, typename _Valuea, typename _Alloca,
			typename _ExtractKeya, typename _Equala,
			typename _H1a, typename _H2a, typename _Hasha,
			typename _RehashPolicya, typename _Traitsa>
		friend struct __detail::_Insert_base;

		template<typename _Keya, typename _Valuea, typename _Alloca,
			typename _ExtractKeya, typename _Equala,
			typename _H1a, typename _H2a, typename _Hasha,
			typename _RehashPolicya, typename _Traitsa,
			bool _Constant_iteratorsa, bool _Unique_keysa>
		friend struct __detail::_Insert;

	public:
		using size_type = typename __hashtable_base::size_type;
		using difference_type = typename __hashtable_base::difference_type;

		using iterator = typename __hashtable_base::iterator;
		using const_iterator = typename __hashtable_base::const_iterator;

		using local_iterator = typename __hashtable_base::local_iterator;
		using const_local_iterator = typename __hashtable_base::
					const_local_iterator;

	private:
		__bucket_type*		_M_buckets		= &_M_single_bucket;
		size_type			_M_bucket_count		= 1;
		__node_base		_M_before_begin;
		size_type			_M_element_count	= 0;
		_RehashPolicy		_M_rehash_policy;

		// A single bucket used when only need for 1 bucket. Especially
		// interesting in move semantic to leave hashtable with only 1 buckets
		// which is not allocated so that we can have those operations noexcept
		// qualified.
		// Note that we can't leave hashtable with 0 bucket without adding
		// numerous checks in the code to avoid 0 modulus.
		__bucket_type		_M_single_bucket	= nullptr;
	};
}

#undef _Cxx_hashtable_define_trivial_hash
