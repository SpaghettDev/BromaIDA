#pragma once

#include "type_traits"

namespace std
{
	// Tag used to default initialize one or both of the pair's elements.
	struct __default_init_tag {};
	struct __value_init_tag {};


	template <class _Tp, int _Idx, bool _CanBeEmptyBase = is_empty<_Tp>::value && !is_final<_Tp>::value>
	struct __compressed_pair_elem {
		using _ParamT = _Tp;
		using reference = _Tp&;
		using const_reference = const _Tp&;

	private:
		_Tp __value_;
	};

	template <class _Tp, int _Idx>
	struct __compressed_pair_elem<_Tp, _Idx, true> : private _Tp {
		using _ParamT = _Tp;
		using reference = _Tp&;
		using const_reference = const _Tp&;
		using __value_type = _Tp;
	};

	template <class _T1, class _T2>
	class __compressed_pair : private __compressed_pair_elem<_T1, 0>,
							  private __compressed_pair_elem<_T2, 1> {
	public:
		using _Base1 = __compressed_pair_elem<_T1, 0>;
		using _Base2 = __compressed_pair_elem<_T2, 1>;
	};
}
