#pragma once

#include "allocator"
#include "__hash"
#include "__uset_hash"
#include "__allocator_traits"
#include "__binary_functions"

namespace std
{
	template<class _Value,
		class _Hash = hash<_Value>,
		class _Pred = std::equal_to<_Value>,
		class _Alloc = std::allocator<_Value> >
	class unordered_set
	{
		typedef __uset_hashtable<_Value, _Hash, _Pred, _Alloc>  _Hashtable;
		_Hashtable _M_h;

	public:
		typedef typename _Hashtable::key_type	key_type;
		typedef typename _Hashtable::value_type	value_type;
		typedef typename _Hashtable::hasher	hasher;
		typedef typename _Hashtable::key_equal	key_equal;
		typedef typename _Hashtable::allocator_type allocator_type;

		typedef typename _Hashtable::pointer		pointer;
		typedef typename _Hashtable::const_pointer	const_pointer;
		typedef typename _Hashtable::reference		reference;
		typedef typename _Hashtable::const_reference	const_reference;
		typedef typename _Hashtable::iterator		iterator;
		typedef typename _Hashtable::const_iterator	const_iterator;
		typedef typename _Hashtable::local_iterator	local_iterator;
		typedef typename _Hashtable::const_local_iterator	const_local_iterator;
		typedef typename _Hashtable::size_type		size_type;
		typedef typename _Hashtable::difference_type	difference_type;
	};
}
