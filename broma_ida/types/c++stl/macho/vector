#pragma once

#include "allocator"
#include "__compressed_pair"
#include "__allocator_traits"

namespace std
{
	template <bool>
	class __vector_base_common
	{
	protected:
		__vector_base_common() {}
		void __throw_length_error() const;
		void __throw_out_of_range() const;
	};

	template <class _Tp, class _Allocator>
	class __vector_base
		: protected __vector_base_common<true>
	{
	public:
		typedef _Allocator                               allocator_type;
		typedef allocator_traits<allocator_type>         __alloc_traits;
		typedef typename __alloc_traits::size_type       size_type;
	protected:
		typedef _Tp                                      value_type;
		typedef value_type&                              reference;
		typedef const value_type&                        const_reference;
		typedef typename __alloc_traits::difference_type difference_type;
		typedef typename __alloc_traits::pointer         pointer;
		typedef typename __alloc_traits::const_pointer   const_pointer;
		typedef pointer                                  iterator;
		typedef const_pointer                            const_iterator;

		pointer                                         __begin_;
		pointer                                         __end_;
		__compressed_pair<pointer, allocator_type>      __end_cap_;
	};

	template <class _Tp, class _Allocator = allocator<_Tp>>
	class vector
		: private __vector_base<_Tp, _Allocator>
	{
	private:
		typedef __vector_base<_Tp, _Allocator>           __base;
		typedef allocator<_Tp>                           __default_allocator_type;
	public:
		typedef vector                                   __self;
		typedef _Tp                                      value_type;
		typedef _Allocator                               allocator_type;
		typedef typename __base::__alloc_traits          __alloc_traits;
		typedef typename __base::reference               reference;
		typedef typename __base::const_reference         const_reference;
		typedef typename __base::size_type               size_type;
		typedef typename __base::difference_type         difference_type;
		typedef typename __base::pointer                 pointer;
		typedef typename __base::const_pointer           const_pointer;
		// typedef __wrap_iter<pointer>                     iterator;
		// typedef __wrap_iter<const_pointer>               const_iterator;
		// typedef _VSTD::reverse_iterator<iterator>         reverse_iterator;
		// typedef _VSTD::reverse_iterator<const_iterator>   const_reverse_iterator;
	};
}
