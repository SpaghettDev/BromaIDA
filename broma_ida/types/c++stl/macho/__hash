#pragma once

#include "unique_ptr"
#include "utility"
#include "__iterator_tags"
#include "__allocator_traits"
#include "__compressed_pair"

namespace std
{
	template <class _NodePtr, class _NodeT = typename pointer_traits<_NodePtr>::element_type>
	struct __hash_node_types;
	template <class _Tp>
	struct __hash_key_value_types;
	template <class _Tp, class _AllocPtr, class _KVTypes = __hash_key_value_types<_Tp>,
		  bool = _KVTypes::__is_map>
	struct __hash_map_pointer_types {};
	template <class _Alloc>
	class __hash_map_node_destructor;


	template <class _NodePtr>      class __hash_iterator;
	template <class _ConstNodePtr> class __hash_const_iterator;
	template <class _NodePtr>      class __hash_local_iterator;
	template <class _ConstNodePtr> class __hash_const_local_iterator;
	template <class _HashIterator> class __hash_map_iterator;
	template <class _HashIterator> class __hash_map_const_iterator;


	template <class _Tp>
	struct __hash_key_value_types {
		typedef _Tp key_type;
		typedef _Tp __node_value_type;
		typedef _Tp __container_value_type;
		static const bool __is_map = false;
	};

	template <class _Tp, class _AllocPtr, class _KVTypes>
	struct __hash_map_pointer_types<_Tp, _AllocPtr, _KVTypes, true> {
		typedef typename _KVTypes::__map_value_type   _Mv;
		typedef __rebind_pointer_t<_AllocPtr, _Mv> __map_value_type_pointer;
		typedef __rebind_pointer_t<_AllocPtr, const _Mv> __const_map_value_type_pointer;
	};


	template <class _NodePtr>
	struct __hash_node_base
	{
		typedef typename pointer_traits<_NodePtr>::element_type __node_type;
		typedef __hash_node_base __first_node;
		typedef __rebind_pointer_t<_NodePtr, __first_node> __node_base_pointer;
		typedef _NodePtr __node_pointer;

		typedef __node_base_pointer __next_pointer;

		__next_pointer    __next_;
	};

	template <class _Tp, class _VoidPtr>
	struct __hash_node
		: public __hash_node_base
				<
					__rebind_pointer_t<_VoidPtr, __hash_node<_Tp, _VoidPtr> >
				>
	{
		typedef _Tp __node_value_type;

		size_t            __hash_;
		__node_value_type __value_;
	};

	template <class _NodePtr, class _Tp, class _VoidPtr>
	struct __hash_node_types<_NodePtr, __hash_node<_Tp, _VoidPtr> >
		: public __hash_key_value_types<_Tp>, __hash_map_pointer_types<_Tp, _VoidPtr>
	{
		typedef __hash_key_value_types<_Tp>           __base;

	public:
		typedef ptrdiff_t difference_type;
		typedef size_t size_type;

		typedef __rebind_pointer_t<_NodePtr, void>       __void_pointer;

		typedef typename pointer_traits<_NodePtr>::element_type       __node_type;
		typedef _NodePtr                                              __node_pointer;

		typedef __hash_node_base<__node_pointer>                      __node_base_type;
		typedef __rebind_pointer_t<_NodePtr, __node_base_type>
																	__node_base_pointer;

		typedef typename __node_base_type::__next_pointer          __next_pointer;

		typedef _Tp                                                 __node_value_type;
		typedef __rebind_pointer_t<_VoidPtr, __node_value_type>
															__node_value_type_pointer;
		typedef __rebind_pointer_t<_VoidPtr, const __node_value_type>
														__const_node_value_type_pointer;
	};

	template <class _NodeValueTp, class _VoidPtr>
	struct __make_hash_node_types {
		typedef __hash_node<_NodeValueTp, _VoidPtr> _NodeTp;
		typedef __rebind_pointer_t<_VoidPtr, _NodeTp> _NodePtr;
		typedef __hash_node_types<_NodePtr> type;
	};

	template <class _Alloc>
	class __bucket_list_deallocator
	{
		typedef _Alloc                                          allocator_type;
		typedef allocator_traits<allocator_type>                __alloc_traits;
		typedef typename __alloc_traits::size_type              size_type;

		__compressed_pair<size_type, allocator_type> __data_;

	public:
		typedef typename __alloc_traits::pointer pointer;
	};

	template <class _Alloc>
	class __hash_map_node_destructor
	{
		typedef _Alloc                              allocator_type;
		typedef allocator_traits<allocator_type>    __alloc_traits;

	public:
		typedef typename __alloc_traits::pointer       pointer;

	private:

		allocator_type& __na_;

		__hash_map_node_destructor& operator=(const __hash_map_node_destructor&);

	public:
		bool __first_constructed;
		bool __second_constructed;
	};


	template <class _Tp, class _Hash, class _Equal, class _Alloc>
	class __hash_table
	{
	public:
		typedef _Tp    value_type;
		typedef _Hash  hasher;
		typedef _Equal key_equal;
		typedef _Alloc allocator_type;

	private:
		typedef allocator_traits<allocator_type> __alloc_traits;
		typedef typename
		__make_hash_node_types<value_type, typename __alloc_traits::void_pointer>::type
																		_NodeTypes;
	public:

		typedef typename _NodeTypes::__node_value_type           __node_value_type;
		typedef typename _NodeTypes::__container_value_type      __container_value_type;
		typedef typename _NodeTypes::key_type                    key_type;
		typedef value_type&                              reference;
		typedef const value_type&                        const_reference;
		typedef typename __alloc_traits::pointer         pointer;
		typedef typename __alloc_traits::const_pointer   const_pointer;
	#ifndef _LIBCPP_ABI_FIX_UNORDERED_CONTAINER_SIZE_TYPE
		typedef typename __alloc_traits::size_type       size_type;
	#else
		typedef typename _NodeTypes::size_type           size_type;
	#endif
		typedef typename _NodeTypes::difference_type     difference_type;
	public:
		// Create __node

		typedef typename _NodeTypes::__node_type __node;
		typedef __rebind_alloc<__alloc_traits, __node>   __node_allocator;
		typedef allocator_traits<__node_allocator>       __node_traits;
		typedef typename _NodeTypes::__void_pointer      __void_pointer;
		typedef typename _NodeTypes::__node_pointer      __node_pointer;
		typedef typename _NodeTypes::__node_pointer      __node_const_pointer;
		typedef typename _NodeTypes::__node_base_type    __first_node;
		typedef typename _NodeTypes::__node_base_pointer __node_base_pointer;
		typedef typename _NodeTypes::__next_pointer      __next_pointer;

	private:
		// check for sane allocator pointer rebinding semantics. Rebinding the
		// allocator for a new pointer type should be exactly the same as rebinding
		// the pointer using 'pointer_traits'.
		typedef __rebind_alloc<__node_traits, __first_node> __node_base_allocator;
		typedef allocator_traits<__node_base_allocator> __node_base_traits;

	private:
		typedef __rebind_alloc<__node_traits, __next_pointer>  __pointer_allocator;
		typedef __bucket_list_deallocator<__pointer_allocator> __bucket_list_deleter;
		typedef unique_ptr<__next_pointer[], __bucket_list_deleter> __bucket_list;
		typedef allocator_traits<__pointer_allocator>          __pointer_alloc_traits;
		typedef typename __bucket_list_deleter::pointer       __node_pointer_pointer;

		// --- Member data begin ---
		__bucket_list                                         __bucket_list_;
		__compressed_pair<__first_node, __node_allocator>     __p1_;
		__compressed_pair<size_type, hasher>                  __p2_;
		__compressed_pair<float, key_equal>                   __p3_;
		// --- Member data end ---

	public:
		// typedef __hash_iterator<__node_pointer>                   iterator;
		// typedef __hash_const_iterator<__node_pointer>             const_iterator;
		// typedef __hash_local_iterator<__node_pointer>             local_iterator;
		// typedef __hash_const_local_iterator<__node_pointer>       const_local_iterator;

		template <class, class, class, class, class> friend class unordered_map;
		template <class, class, class, class, class> friend class unordered_multimap;
	};


	template <class _Arg, class _Result> struct __unary_function_keep_layout_base {};
	template <class _Arg, class _Result>
	using __unary_function = __unary_function_keep_layout_base<_Arg, _Result>;


	template <class _Tp, bool = is_enum<_Tp>::value>
	struct __enum_hash
		: public __unary_function<_Tp, size_t>
	{};
	template <class _Tp>
	struct __enum_hash<_Tp, false> {};

	template <class _Tp>
	struct hash : public __enum_hash<_Tp> {};


	template <class _Key, class _Tp>
	struct __hash_value_type
	{
		typedef _Key                                     key_type;
		typedef _Tp                                      mapped_type;
		typedef pair<const key_type, mapped_type>        value_type;
		typedef pair<key_type&, mapped_type&>            __nc_ref_pair_type;
		typedef pair<key_type&&, mapped_type&&>          __nc_rref_pair_type;

	private:
		value_type __cc_;
	};

	template <class _NodePtr>
	class __hash_iterator
	{
		typedef __hash_node_types<_NodePtr> _NodeTypes;
		typedef _NodePtr                            __node_pointer;
		typedef typename _NodeTypes::__next_pointer __next_pointer;

		__next_pointer            __node_;

	public:
		typedef forward_iterator_tag                           iterator_category;
		typedef typename _NodeTypes::__node_value_type         value_type;
		typedef typename _NodeTypes::difference_type           difference_type;
		typedef value_type&                                    reference;
		typedef typename _NodeTypes::__node_value_type_pointer pointer;

	private:
		template <class, class, class, class> friend class __hash_table;
		template <class> friend class __hash_const_iterator;
		template <class> friend class __hash_map_iterator;
		template <class, class, class, class, class> friend class unordered_map;
		template <class, class, class, class, class> friend class unordered_multimap;
	};

	template <class _HashIterator>
	struct __hash_node_types_from_iterator;
	template <class _NodePtr>
	struct __hash_node_types_from_iterator<__hash_iterator<_NodePtr> > : __hash_node_types<_NodePtr> {};
	template <class _NodePtr>
	struct __hash_node_types_from_iterator<__hash_const_iterator<_NodePtr> > : __hash_node_types<_NodePtr> {};
	template <class _NodePtr>
	struct __hash_node_types_from_iterator<__hash_local_iterator<_NodePtr> > : __hash_node_types<_NodePtr> {};
	template <class _NodePtr>
	struct __hash_node_types_from_iterator<__hash_const_local_iterator<_NodePtr> > : __hash_node_types<_NodePtr> {};


	template <class _NodePtr>
	class __hash_const_iterator
	{
		typedef __hash_node_types<_NodePtr> _NodeTypes;
		typedef _NodePtr                            __node_pointer;
		typedef typename _NodeTypes::__next_pointer __next_pointer;

		__next_pointer __node_;

	public:
		typedef __hash_iterator<_NodePtr> __non_const_iterator;

		typedef forward_iterator_tag                                 iterator_category;
		typedef typename _NodeTypes::__node_value_type               value_type;
		typedef typename _NodeTypes::difference_type                 difference_type;
		typedef const value_type&                                    reference;
		typedef typename _NodeTypes::__const_node_value_type_pointer pointer;

	private:
		template <class, class, class, class> friend class __hash_table;
		template <class> friend class __hash_map_const_iterator;
		template <class, class, class, class, class> friend class unordered_map;
		template <class, class, class, class, class> friend class unordered_multimap;
	};

	template <class _NodePtr>
	class __hash_local_iterator
	{
		typedef __hash_node_types<_NodePtr> _NodeTypes;
		typedef _NodePtr                            __node_pointer;
		typedef typename _NodeTypes::__next_pointer __next_pointer;

		__next_pointer         __node_;
		size_t                 __bucket_;
		size_t                 __bucket_count_;

	public:
		typedef forward_iterator_tag                                iterator_category;
		typedef typename _NodeTypes::__node_value_type              value_type;
		typedef typename _NodeTypes::difference_type                difference_type;
		typedef value_type&                                         reference;
		typedef typename _NodeTypes::__node_value_type_pointer      pointer;

	private:
		template <class, class, class, class> friend class __hash_table;
		template <class> friend class __hash_const_local_iterator;
		template <class> friend class __hash_map_iterator;
	};

	template <class _ConstNodePtr>
	class __hash_const_local_iterator
	{
		typedef __hash_node_types<_ConstNodePtr> _NodeTypes;
		typedef _ConstNodePtr                       __node_pointer;
		typedef typename _NodeTypes::__next_pointer __next_pointer;

		__next_pointer         __node_;
		size_t                 __bucket_;
		size_t                 __bucket_count_;

		typedef pointer_traits<__node_pointer>          __pointer_traits;
		typedef typename __pointer_traits::element_type __node;
		typedef typename remove_const<__node>::type     __non_const_node;
		typedef typename std::pointer_traits<__node_pointer>::template rebind<__non_const_node>
			__non_const_node_pointer;
	public:
		typedef __hash_local_iterator<__non_const_node_pointer>
														__non_const_iterator;

		typedef forward_iterator_tag                                 iterator_category;
		typedef typename _NodeTypes::__node_value_type               value_type;
		typedef typename _NodeTypes::difference_type                 difference_type;
		typedef const value_type&                                    reference;
		typedef typename _NodeTypes::__const_node_value_type_pointer pointer;

	private:
		template <class, class, class, class> friend class __hash_table;
		template <class> friend class __hash_map_const_iterator;
	};
}
