#pragma once

#include "array"
#include "allocator"
#include "cstddef"

namespace stl
{
	template <typename T>
	struct StringData {
		struct Short {
			std::uint8_t sizex2;
			std::array<T, 23> shortStorage;
		};
	
		struct Long {
			std::size_t capacitym1;
			std::size_t size;
			T* longStorage;
		};
	
		union {
			Short m_short;
			Long m_long;
		};
	};
}

namespace std
{
	template <typename T>
	class char_traits {};


	template <class _CharT, class _Traits, class _Allocator>
	class basic_string
	{
	public:
		typedef basic_string                                 __self;
		// typedef basic_string_view<_CharT, _Traits>           __self_view;
		typedef _Traits                                      traits_type;
		typedef _CharT                                       value_type;
		typedef _Allocator                                   allocator_type;
		// typedef allocator_traits<allocator_type>             __alloc_traits;
		typedef typename allocator_type::size_type           size_type;
		typedef typename allocator_type::difference_type     difference_type;
		typedef value_type&                                  reference;
		typedef const value_type&                            const_reference;
		typedef typename allocator_type::pointer             pointer;
		typedef typename allocator_type::const_pointer       const_pointer;

		// TODO: Implement iterator bounds checking without requiring the global database.
		// typedef __wrap_iter<pointer>                         iterator;
		// typedef __wrap_iter<const_pointer>                   const_iterator;
		// typedef std::reverse_iterator<iterator>              reverse_iterator;
		// typedef std::reverse_iterator<const_iterator>        const_reverse_iterator;

	private:
		stl::StringData<_CharT> m_data;
	};

	using string = basic_string<char, char_traits<char>, allocator<char>>;
	using wstring = basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>;
}
