#pragma once

#include "allocator"
#include "__binary_functions"
#include "__allocator_traits"
#include "__tree"

namespace std
{
	template <class _Key, class _Compare = less<_Key>,
			class _Allocator = allocator<_Key> >
	class set
	{
	public:
		// types:
		typedef _Key                                     key_type;
		typedef key_type                                 value_type;
		typedef _Compare                                 key_compare;
		typedef key_compare                              value_compare;
		typedef typename type_identity<_Allocator>::type allocator_type;
		typedef value_type&                              reference;
		typedef const value_type&                        const_reference;

	private:
		typedef __tree<value_type, value_compare, allocator_type> __base;
		typedef allocator_traits<allocator_type>                  __alloc_traits;
		typedef typename __base::__node_holder                    __node_holder;

		__base __tree_;

	public:
		typedef typename __base::pointer               pointer;
		typedef typename __base::const_pointer         const_pointer;
		typedef typename __base::size_type             size_type;
		typedef typename __base::difference_type       difference_type;
		typedef typename __base::const_iterator        iterator;
		typedef typename __base::const_iterator        const_iterator;
		// typedef std::reverse_iterator<iterator>       reverse_iterator;
		// typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

		// typedef __set_node_handle<typename __base::__node, allocator_type> node_type;
		// typedef __insert_return_type<iterator, node_type> insert_return_type;

		template <class _Key2, class _Compare2, class _Alloc2>
		friend class set;
		template <class _Key2, class _Compare2, class _Alloc2>
		friend class multiset;
	};
}
