#pragma once

#include "allocator"
#include "__hash"
#include "__allocator_traits"
#include "__binary_functions"

namespace std
{
	template <class _Value, class _Hash = hash<_Value>, class _Pred = equal_to<_Value>,
		class _Alloc = allocator<_Value> >
	class unordered_set
	{
	public:
		// types
		typedef _Value                                                     key_type;
		typedef key_type                                                   value_type;
		typedef typename type_identity<_Hash>::type                        hasher;
		typedef typename type_identity<_Pred>::type                        key_equal;
		typedef typename type_identity<_Alloc>::type                       allocator_type;
		typedef value_type&                                                reference;
		typedef const value_type&                                          const_reference;

	private:
		typedef __hash_table<value_type, hasher, key_equal, allocator_type> __table;

		__table __table_;

	public:
		typedef typename __table::pointer         pointer;
		typedef typename __table::const_pointer   const_pointer;
		typedef typename __table::size_type       size_type;
		typedef typename __table::difference_type difference_type;

		// typedef typename __table::const_iterator       iterator;
		// typedef typename __table::const_iterator       const_iterator;
		// typedef typename __table::const_local_iterator local_iterator;
		// typedef typename __table::const_local_iterator const_local_iterator;

		// typedef __set_node_handle<typename __table::__node, allocator_type> node_type;
		// typedef __insert_return_type<iterator, node_type> insert_return_type;

		template <class _Value2, class _Hash2, class _Pred2, class _Alloc2>
		friend class unordered_set;
		template <class _Value2, class _Hash2, class _Pred2, class _Alloc2>
		friend class unordered_multiset;
	};
}
