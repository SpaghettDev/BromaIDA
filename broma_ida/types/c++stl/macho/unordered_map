#pragma once

#include "type_traits"
#include "utility"
#include "allocator"
#include "unique_ptr"
#include "__hash"
#include "__iterator_tags"
#include "__binary_functions"
#include "__compressed_pair"
#include "__allocator_traits"
#include "__pointer_traits"

namespace std
{
	template <class _Key, class _Cp, class _Hash,
		  bool = is_empty<_Hash>::value && !is_final<_Hash>::value>
	class __unordered_map_hasher
		: private _Hash
	{};

	template <class _Key, class _Cp, class _Hash>
	class __unordered_map_hasher<_Key, _Cp, _Hash, false>
	{ _Hash __hash_; };

	template <class _Key, class _Cp, class _Pred,
			bool = is_empty<_Pred>::value && !is_final<_Pred>::value>
	class __unordered_map_equal
		: private _Pred
	{};

	template <class _Key, class _Cp, class _Pred>
	class __unordered_map_equal<_Key, _Cp, _Pred, false>
	{ _Pred __pred_; };

	template <class _HashIterator>
	class __hash_map_iterator
	{
		_HashIterator __i_;

		typedef  __hash_node_types_from_iterator<_HashIterator> _NodeTypes;

	public:
		typedef forward_iterator_tag                                 iterator_category;
		typedef typename _NodeTypes::__map_value_type                value_type;
		typedef typename _NodeTypes::difference_type                 difference_type;
		typedef value_type&                                          reference;
		typedef typename _NodeTypes::__map_value_type_pointer       pointer;

		template <class, class, class, class, class> friend class unordered_map;
		template <class, class, class, class, class> friend class unordered_multimap;
		template <class> friend class __hash_const_iterator;
		template <class> friend class __hash_const_local_iterator;
		template <class> friend class __hash_map_const_iterator;
	};

	template <class _HashIterator>
	class __hash_map_const_iterator
	{
		_HashIterator __i_;

		typedef  __hash_node_types_from_iterator<_HashIterator> _NodeTypes;

	public:
		typedef forward_iterator_tag                                 iterator_category;
		typedef typename _NodeTypes::__map_value_type                value_type;
		typedef typename _NodeTypes::difference_type                 difference_type;
		typedef const value_type&                                    reference;
		typedef typename _NodeTypes::__const_map_value_type_pointer  pointer;

		template <class, class, class, class, class> friend class unordered_map;
		template <class, class, class, class, class> friend class unordered_multimap;
		template <class> friend class __hash_const_iterator;
		template <class> friend class __hash_const_local_iterator;
	};


	template <class _Key, class _Tp, class _Hash = hash<_Key>, class _Pred = equal_to<_Key>,
			class _Alloc = allocator<pair<const _Key, _Tp> > >
	class unordered_map
	{
	public:
		// types
		typedef _Key                                           key_type;
		typedef _Tp                                            mapped_type;
		typedef typename type_identity<_Hash>::type            hasher;
		typedef typename type_identity<_Pred>::type            key_equal;
		typedef typename type_identity<_Alloc>::type           allocator_type;
		typedef pair<const key_type, mapped_type>              value_type;
		typedef value_type&                                    reference;
		typedef const value_type&                              const_reference;

	private:
		typedef __hash_value_type<key_type, mapped_type>                 __value_type;
		typedef __unordered_map_hasher<key_type, __value_type, hasher>   __hasher;
		typedef __unordered_map_equal<key_type, __value_type, key_equal> __key_equal;
		typedef typename std::allocator_traits<allocator_type>::template rebind_alloc<__value_type>
																		 __allocator_type;

		typedef __hash_table<__value_type, __hasher,
							__key_equal,  __allocator_type>   __table;

		__table __table_;

		typedef typename __table::_NodeTypes                   _NodeTypes;
		typedef typename __table::__node_pointer               __node_pointer;
		typedef typename __table::__node_const_pointer         __node_const_pointer;
		typedef typename __table::__node_traits                __node_traits;
		typedef typename __table::__node_allocator             __node_allocator;
		typedef typename __table::__node                       __node;
		typedef __hash_map_node_destructor<__node_allocator>   _Dp;
		typedef unique_ptr<__node, _Dp>                         __node_holder;
		typedef allocator_traits<allocator_type>               __alloc_traits;

	public:
		typedef typename __alloc_traits::pointer         pointer;
		typedef typename __alloc_traits::const_pointer   const_pointer;
		typedef typename __table::size_type              size_type;
		typedef typename __table::difference_type        difference_type;

		// typedef __hash_map_iterator<typename __table::iterator>       iterator;
		// typedef __hash_map_const_iterator<typename __table::const_iterator> const_iterator;
		// typedef __hash_map_iterator<typename __table::local_iterator> local_iterator;
		// typedef __hash_map_const_iterator<typename __table::const_local_iterator> const_local_iterator;

		// typedef __map_node_handle<__node, allocator_type> node_type;
		// typedef __insert_return_type<iterator, node_type> insert_return_type;

		template <class _Key2, class _Tp2, class _Hash2, class _Pred2, class _Alloc2>
		friend class unordered_map;
		template <class _Key2, class _Tp2, class _Hash2, class _Pred2, class _Alloc2>
		friend class unordered_multimap;
	};
}
