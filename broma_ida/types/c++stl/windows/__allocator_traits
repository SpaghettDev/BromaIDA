#pragma once

#include "cstddef"
#include "type_traits"

namespace std
{
	template <class _Tp, class _Up, class = void>
	struct __has_rebind_other : false_type { };
	template <class _Tp, class _Up>
	struct __has_rebind_other<_Tp, _Up, __void_t<typename _Tp::template rebind<_Up>::other> > : true_type { };

	template <class _Tp, class _Up, bool = __has_rebind_other<_Tp, _Up>::value>
	struct __allocator_traits_rebind {
		static_assert(__has_rebind_other<_Tp, _Up>::value, "This allocator has to implement rebind");
		using type = typename _Tp::template rebind<_Up>::other;
	};
	template <template <class, class...> class _Alloc, class _Tp, class ..._Args, class _Up>
	struct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, true> {
		using type = typename _Alloc<_Tp, _Args...>::template rebind<_Up>::other;
	};
	template <template <class, class...> class _Alloc, class _Tp, class ..._Args, class _Up>
	struct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, false> {
		using type = _Alloc<_Up, _Args...>;
	};

	template<class _Alloc, class _Tp>
	using __allocator_traits_rebind_t = typename __allocator_traits_rebind<_Alloc, _Tp>::type;


	template <class _Alloc>
	struct allocator_traits
	{
		using allocator_type       = _Alloc;
		using value_type           = allocator_type::value_type;
		using pointer              = allocator_type::pointer;
		using const_pointer        = allocator_type::const_pointer;
		using void_pointer         = void*;
		using const_void_pointer   = const void*;
		using difference_type      = std::ptrdiff_t;
		using size_type            = allocator_type::size_type;
		using reference            = allocator_type::reference;
		using const_reference      = allocator_type::const_reference;

		template <class _Tp>
		using rebind_alloc = __allocator_traits_rebind_t<allocator_type, _Tp>;
		template <class _Tp>
		using rebind_traits = allocator_traits<rebind_alloc<_Tp> >;
	};

	template <class _Traits, class _Tp>
	using __rebind_alloc = typename _Traits::template rebind_alloc<_Tp>;
}
