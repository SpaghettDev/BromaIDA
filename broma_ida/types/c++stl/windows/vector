#pragma once

#include "allocator"
#include "type_traits"
#include "xmemory"
#include "__allocator_traits"
#include "__compressed_pair"

namespace std
{
	template <class _Ty, class _Alloc = allocator<_Ty>>
	class vector { // varying size array of values
	private:
		template <class>
		friend class _Vb_val;
		// friend _Tidy_guard<vector>;

		using _Alty        = std::allocator_traits<_Alloc>::template rebind_alloc<_Ty>;
		using _Alty_traits = allocator_traits<_Alty>;

	public:
		using value_type      = _Ty;
		using allocator_type  = _Alloc;
		using pointer         = typename _Alty_traits::pointer;
		using const_pointer   = typename _Alty_traits::const_pointer;
		using reference       = _Ty&;
		using const_reference = const _Ty&;
		using size_type       = typename _Alty_traits::size_type;
		using difference_type = typename _Alty_traits::difference_type;

		using _Scary_val = _Vector_val<conditional_t<_Is_simple_alloc_v<_Alty>, _Simple_types<_Ty>,
			_Vec_iter_types<_Ty, size_type, difference_type, pointer, const_pointer>>>;

	public:
		// using iterator               = _Vector_iterator<_Scary_val>;
		// using const_iterator         = _Vector_const_iterator<_Scary_val>;
		// using reverse_iterator       = _STD reverse_iterator<iterator>;
		// using const_reverse_iterator = _STD reverse_iterator<const_iterator>;

	private:
		_Compressed_pair<_Alty, _Scary_val> _Mypair;
	};


	template <class _Alloc0>
	struct _Wrap_alloc { // TRANSITION, ABI compat, preserves symbol names of vector<bool>::iterator
		using _Alloc = _Alloc0;
	};
	
	using _Vbase = unsigned int; // word type for vector<bool> representation
	inline constexpr int _VBITS = 8 * sizeof(_Vbase); // at least CHAR_BITS bits per word

	template <class _Alloc>
	class _Vb_val : public _Container_base {
	public:
		using _Alvbase         = std::allocator_traits<_Alloc>::template rebind_alloc<_Vbase>;
		using _Alvbase_traits  = allocator_traits<_Alvbase>;
		using _Vectype         = vector<_Vbase, _Alvbase>;
		using _Alvbase_wrapped = _Wrap_alloc<_Alvbase>;
		using size_type        = typename _Alvbase_traits::size_type;

		_Vectype _Myvec; // base vector of words
		size_type _Mysize; // current length of sequence
	};

	template <class _Alvbase_wrapped>
	class _Vb_iter_base : public _Iterator_base {
		// store information common to reference and iterators
	public:
		using _Alvbase         = typename _Alvbase_wrapped::_Alloc;
		using _Size_type       = typename allocator_traits<_Alvbase>::size_type;
		using _Difference_type = typename allocator_traits<_Alvbase>::difference_type;
		using _Mycont          = vector<bool, typename std::allocator_traits<_Alvbase>::template rebind_alloc<bool>>;

		static constexpr _Difference_type _VBITS_DIFF = _VBITS;

		const _Vbase* _Myptr = nullptr;
		_Size_type _Myoff    = 0;
	};

	template <class _Alvbase_wrapped>
	class _Vb_reference : public _Vb_iter_base<_Alvbase_wrapped> {
		// reference to a bit within a base word
	private:
		using _Mybase          = _Vb_iter_base<_Alvbase_wrapped>;
		using _Mycont          = typename _Mybase::_Mycont;
		using _Difference_type = typename _Mybase::_Difference_type;
	};

	template <class _Alloc>
	class vector<bool, _Alloc> : public _Vb_val<_Alloc> {
	public:
		using _Mybase          = _Vb_val<_Alloc>;
		using _Alvbase_wrapped = typename _Mybase::_Alvbase_wrapped;
		using _Alvbase         = typename _Mybase::_Alvbase;
		using _Alvbase_traits  = typename _Mybase::_Alvbase_traits;

		using size_type       = typename _Alvbase_traits::size_type;
		using difference_type = typename _Alvbase_traits::difference_type;
		using allocator_type  = _Alloc;

		using reference       = _Vb_reference<_Alvbase_wrapped>;
		using const_reference = bool;
		using value_type      = bool;

		using _Reft          = reference;
		// using iterator       = _Vb_iterator<_Alvbase_wrapped>;
		// using const_iterator = _Vb_const_iterator<_Alvbase_wrapped>;

		// using pointer                = iterator;
		// using const_pointer          = const_iterator;
		// using reverse_iterator       = _STD reverse_iterator<iterator>;
		// using const_reverse_iterator = _STD reverse_iterator<const_iterator>;
	};
}
