#pragma once

#include "cstddef"

namespace std
{
	template <class...>
	using __void_t = void;


	template <class _Ty, _Ty _Val>
	struct integral_constant {
		static constexpr _Ty value = _Val;

		using value_type = _Ty;
		using type       = integral_constant;

		constexpr operator value_type() const noexcept {
			return value;
		}

		constexpr value_type operator()() const noexcept {
			return value;
		}
	};

	template <bool _Val>
	using bool_constant = integral_constant<bool, _Val>;

	using true_type  = bool_constant<true>;
	using false_type = bool_constant<false>;


	template <class _Ty>
	struct is_empty : bool_constant<__is_empty(_Ty)> {}; // determine whether _Ty is an empty class

	template <class _Ty>
	inline constexpr bool is_empty_v = __is_empty(_Ty);

	template <class _Ty>
	struct is_final : bool_constant<__is_final(_Ty)> {}; // determine whether _Ty is a final class

	template <class _Ty>
	inline constexpr bool is_final_v = __is_final(_Ty);

	#ifdef __clang__
	template <class _Ty1, class _Ty2>
	inline constexpr bool is_same_v = __is_same(_Ty1, _Ty2);

	template <class _Ty1, class _Ty2>
	struct is_same : bool_constant<__is_same(_Ty1, _Ty2)> {};
#else // ^^^ Clang / not Clang vvv
	template <class, class>
	inline constexpr bool is_same_v = false; // determine whether arguments are the same type
	template <class _Ty>
	inline constexpr bool is_same_v<_Ty, _Ty> = true;

	template <class _Ty1, class _Ty2>
	struct is_same : bool_constant<is_same_v<_Ty1, _Ty2>> {};
#endif // ^^^ not Clang ^^^

	template <class _Ty>
	struct is_enum : bool_constant<__is_enum(_Ty)> {}; // determine whether _Ty is an enumerated type

	template <class _Ty>
	inline constexpr bool is_enum_v = __is_enum(_Ty);

	template <class>
	inline constexpr bool is_const_v = false; // determine whether type argument is const qualified

	template <class _Ty>
	inline constexpr bool is_const_v<const _Ty> = true;

	template <class _Ty>
	struct is_const : bool_constant<is_const_v<_Ty>> {};

	template <class>
	inline constexpr bool is_volatile_v = false; // determine whether type argument is volatile qualified

	template <class _Ty>
	inline constexpr bool is_volatile_v<volatile _Ty> = true;

	template <class _Ty>
	struct is_volatile : bool_constant<is_volatile_v<_Ty>> {};

	template <class>
	inline constexpr bool is_pointer_v = false; // determine whether _Ty is a pointer

	template <class _Ty>
	inline constexpr bool is_pointer_v<_Ty*> = true;

	template <class _Ty>
	inline constexpr bool is_pointer_v<_Ty* const> = true;

	template <class _Ty>
	inline constexpr bool is_pointer_v<_Ty* volatile> = true;

	template <class _Ty>
	inline constexpr bool is_pointer_v<_Ty* const volatile> = true;

	template <class _Ty>
	struct is_pointer : bool_constant<is_pointer_v<_Ty>> {};


	template <bool _Test, class _Ty1, class _Ty2>
	struct conditional { // Choose _Ty1 if _Test is true, and _Ty2 otherwise
		using type = _Ty1;
	};

	template <class _Ty1, class _Ty2>
	struct conditional<false, _Ty1, _Ty2> {
		using type = _Ty2;
	};

	template <bool _Test, class _Ty1, class _Ty2>
	using conditional_t = typename conditional<_Test, _Ty1, _Ty2>::type;


	template <class _Ty, size_t _Len>
	union _Align_type { // union with size _Len bytes and alignment of _Ty
		_Ty _Val;
		char _Pad[_Len];
	};

	template <size_t _Len, size_t _Align, class _Ty, bool _Ok>
	struct _Aligned; // define type with size _Len and alignment _Ty

	template <size_t _Len, size_t _Align, class _Ty>
	struct _Aligned<_Len, _Align, _Ty, true> {
		using type = _Align_type<_Ty, _Len>;
	};

	template <size_t _Len, size_t _Align>
	struct _Aligned<_Len, _Align, double, false> {
		using type = _Align_type<max_align_t, _Len>;
	};

	template <size_t _Len, size_t _Align>
	struct _Aligned<_Len, _Align, int, false> {
		using _Next                 = double;
		static constexpr bool _Fits = _Align <= alignof(_Next);
		using type                  = typename _Aligned<_Len, _Align, _Next, _Fits>::type;
	};

	template <size_t _Len, size_t _Align>
	struct _Aligned<_Len, _Align, short, false> {
		using _Next                 = int;
		static constexpr bool _Fits = _Align <= alignof(_Next);
		using type                  = typename _Aligned<_Len, _Align, _Next, _Fits>::type;
	};

	template <size_t _Len, size_t _Align>
	struct _Aligned<_Len, _Align, char, false> {
		using _Next                 = short;
		static constexpr bool _Fits = _Align <= alignof(_Next);
		using type                  = typename _Aligned<_Len, _Align, _Next, _Fits>::type;
	};

	template <size_t _Len, size_t _Align = alignof(max_align_t)>
	struct _Aligned_storage { // define type with size _Len and alignment _Align
		using _Next                 = char;
		static constexpr bool _Fits = _Align <= alignof(_Next);
		using type                  = typename _Aligned<_Len, _Align, _Next, _Fits>::type;
	};

	template <size_t _Len, size_t _Align = alignof(max_align_t)>
	using _Aligned_storage_t = typename _Aligned_storage<_Len, _Align>::type;


	template <class _Ty>
	struct remove_cv { // remove top-level const and volatile qualifiers
		using type = _Ty;

		template <template <class> class _Fn>
		using _Apply = _Fn<_Ty>; // apply cv-qualifiers from the class template argument to _Fn<_Ty>
	};

	template <class _Ty>
	struct remove_cv<const _Ty> {
		using type = _Ty;

		template <template <class> class _Fn>
		using _Apply = const _Fn<_Ty>;
	};

	template <class _Ty>
	struct remove_cv<volatile _Ty> {
		using type = _Ty;

		template <template <class> class _Fn>
		using _Apply = volatile _Fn<_Ty>;
	};

	template <class _Ty>
	struct remove_cv<const volatile _Ty> {
		using type = _Ty;

		template <template <class> class _Fn>
		using _Apply = const volatile _Fn<_Ty>;
	};

	template <class _Ty>
	struct remove_reference {
		using type                 = _Ty;
		using _Const_thru_ref_type = const _Ty;
	};

	template <class _Ty>
	struct remove_reference<_Ty&> {
		using type                 = _Ty;
		using _Const_thru_ref_type = const _Ty&;
	};

	template <class _Ty>
	struct remove_reference<_Ty&&> {
		using type                 = _Ty;
		using _Const_thru_ref_type = const _Ty&&;
	};

	template <class _Ty>
	using remove_cv_t = typename remove_cv<_Ty>::type;

	template <class _Ty>
	using remove_reference_t = typename remove_reference<_Ty>::type;

	template <class _Ty>
	using _Remove_cvref_t = remove_cv_t<remove_reference_t<_Ty>>;

	template <bool _First_value, class _First, class... _Rest>
	struct _Disjunction { // handle true trait or last trait
		using type = _First;
	};

	template <class _False, class _Next, class... _Rest>
	struct _Disjunction<false, _False, _Next, _Rest...> { // first trait is false, try the next trait
		using type = typename _Disjunction<_Next::value, _Next, _Rest...>::type;
	};

	template <class... _Traits>
	struct disjunction : false_type {}; // If _Traits is empty, false_type

	template <class _First, class... _Rest>
	struct disjunction<_First, _Rest...> : _Disjunction<_First::value, _First, _Rest...>::type {
		// the first true trait in _Traits, or the last trait if none are true
	};

	template <class... _Traits>
	inline constexpr bool disjunction_v = disjunction<_Traits...>::value;

	template <class _Ty, class... _Types>
	inline constexpr bool _Is_any_of_v = // true if and only if _Ty is in _Types
	#if __cplusplus > 201402L
		(is_same_v<_Ty, _Types> || ...);
	#else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
		disjunction_v<is_same<_Ty, _Types>...>;
	#endif // ^^^ !_HAS_CXX17 ^^^

	template <class _Ty>
	inline constexpr bool is_integral_v = _Is_any_of_v<remove_cv_t<_Ty>, bool, char, signed char, unsigned char,
		wchar_t,
	#ifdef __cpp_char8_t
		char8_t,
	#endif // defined(__cpp_char8_t)
		char16_t, char32_t, short, unsigned short, int, unsigned int, long, unsigned long, long long, unsigned long long>;

	template <class _Ty>
	struct is_integral : bool_constant<is_integral_v<_Ty>> {};
}
