#pragma once

#include "allocator"
#include "utility"
#include "list"
#include "__xnode"
#include "__binary_functions"
#include "__allocator_traits"
#include "__hash"

namespace std
{
	template <class _Kty, // key type (same as value type)
		class _Tr, // comparator predicate type
		class _Alloc, // actual allocator type (should be value allocator)
		bool _Mfl> // true if multiple equivalent keys are permitted
	class _Uset_traits : public _Tr { // traits required to make _Hash behave like a set
	public:
		using key_type            = _Kty;
		using value_type          = _Kty;
		using _Mutable_value_type = _Kty;
		using key_compare         = _Tr;
		using allocator_type      = _Alloc;
		using node_type = _Node_handle<_List_node<value_type, typename allocator_traits<_Alloc>::void_pointer>, _Alloc,
			_Node_handle_set_base, _Kty>;

		static constexpr bool _Multi    = _Mfl;
		static constexpr bool _Standard = true;

		template <class... _Args>
		using _In_place_key_extractor = _In_place_key_extract_set<_Kty, _Args...>;

		using value_compare = void; // TRANSITION, remove when _Standard becomes unconditionally true
	};

	template <class _Kty, class _Hasher = hash<_Kty>, class _Keyeq = equal_to<_Kty>,
		class _Alloc = allocator<_Kty>>
	class unordered_set : public _Hash<_Uset_traits<_Kty, _Uhash_compare<_Kty, _Hasher, _Keyeq>, _Alloc, false>> {
		// hash table of key-values, unique keys
	private:
		using _Mytraits      = _Uhash_compare<_Kty, _Hasher, _Keyeq>;
		using _Mybase        = _Hash<_Uset_traits<_Kty, _Mytraits, _Alloc, false>>;
		using _Alnode        = typename _Mybase::_Alnode;
		using _Alnode_traits = typename _Mybase::_Alnode_traits;
		using _Key_compare   = typename _Mybase::_Key_compare;

	public:
		using hasher    = _Hasher;
		using key_type  = _Kty;
		using key_equal = _Keyeq;

		using value_type      = typename _Mybase::value_type;
		using allocator_type  = typename _Mybase::allocator_type;
		using size_type       = typename _Mybase::size_type;
		using difference_type = typename _Mybase::difference_type;
		using pointer         = typename _Mybase::pointer;
		using const_pointer   = typename _Mybase::const_pointer;
		using reference       = value_type&;
		using const_reference = const value_type&;
		// using iterator        = typename _Mybase::iterator;
		// using const_iterator  = typename _Mybase::const_iterator;

		// using local_iterator       = typename _Mybase::iterator;
		// using const_local_iterator = typename _Mybase::const_iterator;

		// using insert_return_type = _Insert_return_type<iterator, typename _Mybase::node_type>;

		// using _Mybase::_Unchecked_begin;
		// using _Mybase::_Unchecked_end;
	};
}
