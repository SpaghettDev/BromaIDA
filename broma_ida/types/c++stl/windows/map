#pragma once

#include "allocator"
#include "utility"
#include "xmemory"
#include "__tree"
#include "__binary_functions"
#include "__allocator_traits"

namespace std
{
	template <class _Kty, // key type
		class _Ty, // mapped type
		class _Pr, // comparator predicate type
		class _Alloc, // actual allocator type (should be value allocator)
		bool _Mfl> // true if multiple equivalent keys are permitted
	class _Tmap_traits { // traits required to make _Tree behave like a map
	public:
		using key_type       = _Kty;
		using value_type     = std::pair<const _Kty, _Ty>;
		using key_compare    = _Pr;
		using allocator_type = _Alloc;
		using node_type = _Node_handle<_Tree_node<value_type, typename allocator_traits<_Alloc>::void_pointer>, _Alloc,
			_Node_handle_map_base, _Kty, _Ty>;

		static constexpr bool _Multi = _Mfl;

		template <class... _Args>
		using _In_place_key_extractor = _In_place_key_extract_map<_Kty, _Args...>;
	};

	template <class _Kty, class _Ty, class _Pr = less<_Kty>, class _Alloc = allocator<pair<const _Kty, _Ty>>>
	class map : public _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, false>> {
		// ordered red-black tree of {key, mapped} values, unique keys
	public:
		using _Mybase                = _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, false>>;
		using _Nodeptr               = typename _Mybase::_Nodeptr;
		using key_type               = _Kty;
		using mapped_type            = _Ty;
		using key_compare            = _Pr;
		// using value_compare          = typename _Mybase::value_compare;
		using value_type             = pair<const _Kty, _Ty>;
		using allocator_type         = typename _Mybase::allocator_type;
		using size_type              = typename _Mybase::size_type;
		using difference_type        = typename _Mybase::difference_type;
		using pointer                = typename _Mybase::pointer;
		using const_pointer          = typename _Mybase::const_pointer;
		using reference              = value_type&;
		using const_reference        = const value_type&;
		using iterator               = typename _Mybase::iterator;
		using const_iterator         = typename _Mybase::const_iterator;
		// using reverse_iterator       = typename _Mybase::reverse_iterator;
		// using const_reverse_iterator = typename _Mybase::const_reverse_iterator;

		// using _Alnode        = typename _Mybase::_Alnode;
		// using _Alnode_traits = typename _Mybase::_Alnode_traits;

		// using insert_return_type = _Insert_return_type<iterator, typename _Mybase::node_type>;

		// using _Mybase::_Unchecked_begin;
		// using _Mybase::_Unchecked_end;
	};
}
