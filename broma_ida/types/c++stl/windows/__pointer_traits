#pragma once

#include "type_traits"
#include "cstddef"

namespace std
{
	template <class _Tp, class = void>
	struct __has_element_type : false_type {};

	template <class _Tp>
	struct __has_element_type<_Tp, __void_t<typename _Tp::element_type> > : true_type {};

	template <class _Ptr, bool = __has_element_type<_Ptr>::value>
	struct __pointer_traits_element_type;

	template <class _Ptr>
	struct __pointer_traits_element_type<_Ptr, true>
	{
		typedef typename _Ptr::element_type type;
	};

	template <template <class, class...> class _Sp, class _Tp, class ..._Args>
	struct __pointer_traits_element_type<_Sp<_Tp, _Args...>, true>
	{
		typedef typename _Sp<_Tp, _Args...>::element_type type;
	};

	template <template <class, class...> class _Sp, class _Tp, class ..._Args>
	struct __pointer_traits_element_type<_Sp<_Tp, _Args...>, false>
	{
		typedef _Tp type;
	};

	template <class _Tp, class = void>
	struct __has_difference_type : false_type {};

	template <class _Tp>
	struct __has_difference_type<_Tp, __void_t<typename _Tp::difference_type> > : true_type {};

	template <class _Ptr, bool = __has_difference_type<_Ptr>::value>
	struct __pointer_traits_difference_type
	{
		typedef ptrdiff_t type;
	};

	template <class _Ptr>
	struct __pointer_traits_difference_type<_Ptr, true>
	{
		typedef typename _Ptr::difference_type type;
	};

	template <class _Tp, class _Up>
	struct __has_rebind
	{
	private:
		template <class _Xp> static false_type __test(...);
		template <class _Xp> static true_type __test(typename _Xp::template rebind<_Up>* = 0);
	public:
		static const bool value = decltype(__test<_Tp>(0))::value;
	};

	template <class _Tp, class _Up, bool = __has_rebind<_Tp, _Up>::value>
	struct __pointer_traits_rebind
	{
		typedef typename _Tp::template rebind<_Up> type;
	};

	template <template <class, class...> class _Sp, class _Tp, class ..._Args, class _Up>
	struct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, true>
	{
		typedef typename _Sp<_Tp, _Args...>::template rebind<_Up> type;
	};

	template <template <class, class...> class _Sp, class _Tp, class ..._Args, class _Up>
	struct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, false>
	{
		typedef _Sp<_Up, _Args...> type;
	};

	template <class _Ptr>
	struct pointer_traits
	{
		typedef _Ptr                                                     pointer;
		typedef typename __pointer_traits_element_type<pointer>::type    element_type;
		typedef typename __pointer_traits_difference_type<pointer>::type difference_type;

		template <class _Up> using rebind = typename __pointer_traits_rebind<pointer, _Up>::type;

	private:
		struct __nat {};
	};

	template <class _Tp>
	struct pointer_traits<_Tp*>
	{
		typedef _Tp*      pointer;
		typedef _Tp       element_type;
		typedef ptrdiff_t difference_type;

		template <class _Up> using rebind = _Up*;

	private:
		struct __nat {};
	};

	template <class _From, class _To>
	using __rebind_pointer_t = typename pointer_traits<_From>::template rebind<_To>;
}
